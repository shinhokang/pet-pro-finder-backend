type CreateCommentResponse {
  ok: Boolean!
  error: String
  comment: Comment
}

type Mutation {
  CreateComment(text: String!, trainerId: Int!, commentId: Int): CreateCommentResponse!
  DeleteComment(commentId: Int!): DeleteCommentResponse!
  EditComment(commentId: Int!, text: String!): EditCommentResponse!
  ToggleFavorite(trainerId: Int!): ToggleFavoriteResponse!
  CreateReview(trainerId: Int!, title: String!, text: String!, ratingForExpertise: Float!, ratingForFriendliness: Float!, problemCategoryIds: [Int!]): CreateReviewResponse!
  DeleteReview(reviewId: Int!): DeleteReviewResponse!
  EditReview(reviewId: Int!, title: String!, text: String!, ratingForExpertise: Float!, ratingForFriendliness: Float!, problemCategoryIds: [Int]): EditReviewResponse!
  CreateTrainer(title: String!, description: String!, images: [String], videos: [String], licenses: [String], experiences: [String], workingAreas: [String]): CreateTrainerResponse!
  EditTrainer(trainerId: Int!, description: String!, licenses: [String], experiences: [String], workingAreas: [String], images: [String], videos: [String]): EditTrainerResponse!
  CreateTrainingProgram(trainerId: Int!, description: String!, price: Int!, problemCategories: [String], images: [String], videos: [String]): CreateTrainingProgramResponse!
  DeleteTrainingProgram(trainingProgramId: Int!): DeleteTrainingProgramResponse!
  EditTrainingProgram(trainingProgramId: Int!, description: String, price: Int, images: [String], videos: [String]): EditTrainingProgramResponse!
  EditUser(name: String, password: String, phoneNumber: String, description: String, profileImage: String): EditUserResponse!
  Join(email: String!, password: String!, name: String!): JoinResponse!
  Login(email: String!, password: String!): LoginResponse!
}

type DeleteCommentResponse {
  ok: Boolean!
  error: String
}

type EditCommentResponse {
  ok: Boolean!
  error: String
}

type Comment {
  id: Int!
  text: String!
  parentComment: Comment
  parentCommentId: Int
  childComments: [Comment]
  user: User!
  userId: Int
  trainer: Trainer!
  trainerId: Int
  createdAt: String!
  updatedAt: String
}

type Experience {
  id: Int!
  text: String!
  period: String!
  trainer: Trainer!
  trainerId: Int!
  createdAt: String!
  updatedAt: String
}

type Favorite {
  id: Int!
  marked: Boolean!
  user: User!
  userId: Int
  trainer: Trainer!
  trainerId: Int
  createdAt: String!
  updatedAt: String
}

type ToggleFavoriteResponse {
  ok: Boolean!
  error: String
  add: Boolean!
}

type License {
  id: Int!
  name: String!
  organization: String
  createdAt: String!
  updatedAt: String
}

type GetAllProblemCategoriesResponse {
  ok: Boolean!
  error: String
  problemCategories: [ProblemCategory]
}

type Query {
  GetAllProblemCategories: GetAllProblemCategoriesResponse!
  FilterTrainers(workingAreas: [String], page: Int, take: Int): FilterTrainersResponse!
  GetAllTrainers: GetAllTrainersResponse!
  GetTrainer(trainerId: Int!): GetTrainerResponse!
  Me: MeResponse!
}

type ProblemCategory {
  id: Int!
  name: String!
  order: Int!
  createdAt: String!
  updatedAt: String
}

type CreateReviewResponse {
  ok: Boolean!
  error: String
  review: Review
}

type DeleteReviewResponse {
  ok: Boolean!
  error: String
}

type EditReviewResponse {
  ok: Boolean!
  error: String
}

type Review {
  id: Int!
  title: String!
  text: String!
  ratingForExpertise: Float!
  ratingForFriendliness: Float!
  user: User!
  userId: Int!
  trainer: Trainer!
  trainerId: Int!
  problemCategories: [ProblemCategory]
  createdAt: String!
  updatedAt: String
}

type CreateTrainerResponse {
  ok: Boolean!
  error: String
  trainer: Trainer
}

type EditTrainerResponse {
  ok: Boolean!
  error: String
}

type FilterTrainersResponse {
  ok: Boolean!
  error: String
  trainers: [Trainer]
  page: Int!
  totalPages: Int!
}

type GetAllTrainersResponse {
  ok: Boolean!
  error: String
  trainers: [Trainer]
}

type GetTrainerResponse {
  ok: Boolean!
  error: String
  trainer: Trainer
}

type Trainer {
  id: Int!
  title: String!
  description: String!
  images: [String]
  videos: [String]
  experiences: [Experience]
  user: User!
  userId: Int!
  trainingPrograms: [TrainingProgram]
  comments: [Comment]
  reviews: [Review]
  favorites: [Favorite]
  workingAreas: [WorkingArea]
  licenses: [License]
  createdAt: String!
  updatedAt: String
}

type CreateTrainingProgramResponse {
  ok: Boolean!
  error: String
  trainingProgram: TrainingProgram
}

type DeleteTrainingProgramResponse {
  ok: Boolean!
  error: String
}

type EditTrainingProgramResponse {
  ok: Boolean!
  error: String
}

type TrainingProgram {
  id: Int!
  title: String
  description: String
  price: Int
  images: [String]
  videos: [String]
  trainer: Trainer!
  trainerId: Int!
  problemCategories: [ProblemCategory]
  createdAt: String!
  updatedAt: String
}

type EditUserResponse {
  ok: Boolean!
  error: String
}

type JoinResponse {
  ok: Boolean!
  error: String
  token: String
  isNew: Boolean!
}

type LoginResponse {
  ok: Boolean!
  error: String
  token: String
}

type MeResponse {
  ok: Boolean!
  error: String
  user: User
}

type User {
  id: Int!
  email: String!
  name: String
  password: String
  naverId: String
  kakaoId: String
  fbId: String
  googleId: String
  phoneNumber: String
  description: String
  profileImage: String
  trainerId: Int
  trainer: Trainer
  comments: [Comment]
  reviews: [Review]
  favorites: [Favorite]
  isTrainer: Boolean!
  profilePhoto: String!
  createdAt: String!
  updatedAt: String
}

type WorkingArea {
  id: Int!
  text: String!
  parentWorkingArea: WorkingArea
  parentWorkingAreaId: Int
  childWorkingAreas: [WorkingArea]
  createdAt: String!
  updatedAt: String
}
